<div class="containerAtividades">

    <!-- Filtros em card centralizado -->
    <div class="filtros-container">
        <div class="filtros-card">
            <span style="font-weight: bold; color: #a78bfa; font-size: 18px; margin-right: 18px;">Filtros</span>
            <label for="filtroPrioridade">Prioridade:</label>
            <select id="filtroPrioridade">
                <option value="">Todas</option>
                <option value="baixa">Baixa</option>
                <option value="media">Média</option>
                <option value="alta">Alta</option>
                <option value="urgente">Urgente</option>
            </select>
            <label for="filtroStatus">Status:</label>
            <select id="filtroStatus">
                <option value="">Todos</option>
                <option value="true">Concluída</option>
                <option value="false">Pendente</option>
            </select>
        </div>
    </div>
    <br>
    <div>
        <table>
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descrição</th>
                    <th scope="col">Prazo</th>
                    <th scope="col">Prioridade</th>
                    <th scope="col">Status</th>
                    <th scope="col">Ações</th>
                </tr>
            </thead>
            <tbody id="atividades"></tbody>
        </table>

        <!-- Modal de Edição -->
        <div id="editModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Editar Tarefa</h2>
                    <span class="close" onclick="closeEditModal()">&times;</span>
                </div>
                <form id="editForm">
                    <div class="form-container">
                        <div class="form-group">
                            <label for="editTitulo">Título:</label>
                            <input type="text" id="editTitulo" name="titulo" required maxlength="100">
                            <div class="error-message" id="tituloError"></div>
                        </div>
                        
                        <div class="form-group">
                            <label for="editDescricao">Descrição:</label>
                            <textarea id="editDescricao" name="descricao" rows="3" maxlength="500"></textarea>
                            <div class="error-message" id="descricaoError"></div>
                        </div>
                        
                        <div class="form-group">
                            <label for="editPrazo">Data de Vencimento:</label>
                            <input type="date" id="editPrazo" name="prazo">
                            <div class="error-message" id="prazoError"></div>
                        </div>
                        
                        <div class="form-group">
                            <label for="editPrioridade">Prioridade:</label>
                            <select id="editPrioridade" name="prioridade" required>
                                <option value="baixa">Baixa</option>
                                <option value="media">Média</option>
                                <option value="alta">Alta</option>
                                <option value="urgente">Urgente</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="editStatus">Status:</label>
                            <select id="editStatus" name="concluido" required>
                                <option value="false">Pendente</option>
                                <option value="true">Concluída</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" onclick="closeEditModal()" class="btn-cancel">Cancelar</button>
                        <button type="submit" class="btn-save">Salvar Alterações</button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            let currentEditingTaskId = null;
            let allTasks = [];

            window.addEventListener('load', async () => {
                await loadTasks();
                document.getElementById('filtroPrioridade').addEventListener('change', renderFilteredTasks);
                document.getElementById('filtroStatus').addEventListener('change', renderFilteredTasks);
            });

            async function loadTasks() {
                try {
                    const response = await fetch("/task/user");
                    allTasks = await response.json();
                    renderFilteredTasks();
                } catch (error) {
                    console.error('Erro ao carregar tarefas:', error);
                    if (error.status === 401) {
                        alert('Sessão expirada. Faça login novamente.');
                        window.location.href = '/login';
                    } else {
                        alert('Erro ao carregar tarefas');
                    }
                }
            }

            function renderFilteredTasks() {
                const prioridade = document.getElementById('filtroPrioridade').value;
                const status = document.getElementById('filtroStatus').value;
                const tableBody = document.querySelector("#atividades");
                tableBody.innerHTML = '';
                let filtered = allTasks;
                if (prioridade) {
                    filtered = filtered.filter(task => (task.prioridade || '').toLowerCase() === prioridade);
                }
                if (status) {
                    filtered = filtered.filter(task => String(task.concluido) === status);
                }
                filtered.forEach(task => {
                    const line = document.createElement("tr");
                    line.setAttribute('data-task-id', task.id);
                    createColumn(line, task.título);
                    createColumn(line, task.descricao);
                    createColumn(line, formatDate(task.prazo));
                    createColumn(line, formatPriority(task.prioridade));
                    createColumn(line, formatStatus(task.concluido));
                    const actionsColumn = document.createElement("td");
                    actionsColumn.style.cssText = "display: flex; gap: 8px; align-items: center;";
                    const editButton = document.createElement("button");
                    editButton.innerText = "Editar";
                    editButton.style.cssText = "background-color: #3b82f6; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;";
                    editButton.addEventListener('click', () => openEditModal(task));
                    const deleteButton = document.createElement("button");
                    deleteButton.innerText = "Excluir";
                    deleteButton.style.cssText = "background-color: #dc2626; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;";
                    deleteButton.addEventListener('click', () => deleteTask(task.id, line));
                    actionsColumn.appendChild(editButton);
                    actionsColumn.appendChild(deleteButton);
                    line.appendChild(actionsColumn);
                    tableBody.appendChild(line);
                });
            }

            function createColumn(line, text) {
                const column = document.createElement("td");
                column.innerText = text;
                line.appendChild(column);
            }

            function formatDate(dateString) {
                if (!dateString) return 'Sem prazo';
                const date = new Date(dateString);
                return date.toLocaleDateString('pt-BR');
            }

            function formatPriority(priority) {
                const priorities = {
                    'baixa': 'Baixa',
                    'media': 'Média',
                    'alta': 'Alta',
                    'urgente': 'Urgente'
                };
                return priorities[priority] || priority;
            }

            function formatStatus(status) {
                return status === true || status === 'true' ? 'Concluída' : 'Pendente';
            }

            function openEditModal(task) {
                currentEditingTaskId = task.id;
                
                // Preenche o formulário com os dados da tarefa
                document.getElementById('editTitulo').value = task.título || '';
                document.getElementById('editDescricao').value = task.descricao || '';
                document.getElementById('editPrazo').value = task.prazo ? task.prazo.split('T')[0] : '';
                document.getElementById('editPrioridade').value = task.prioridade || 'baixa';
                document.getElementById('editStatus').value = task.concluido ? 'true' : 'false';
                
                // Limpa mensagens de erro
                clearErrorMessages();
                
                // Mostra o modal
                document.getElementById('editModal').style.display = 'block';
            }

            function closeEditModal() {
                document.getElementById('editModal').style.display = 'none';
                currentEditingTaskId = null;
                clearErrorMessages();
            }

            function clearErrorMessages() {
                const errorElements = document.querySelectorAll('.error-message');
                errorElements.forEach(element => element.textContent = '');
            }

            function validateForm() {
                let isValid = true;
                clearErrorMessages();

                const titulo = document.getElementById('editTitulo').value.trim();
                const descricao = document.getElementById('editDescricao').value.trim();
                const prazo = document.getElementById('editPrazo').value;

                // Validação do título
                if (!titulo) {
                    document.getElementById('tituloError').textContent = 'Título é obrigatório';
                    isValid = false;
                } else if (titulo.length < 3) {
                    document.getElementById('tituloError').textContent = 'Título deve ter pelo menos 3 caracteres';
                    isValid = false;
                }

                // Validação da descrição
                if (descricao.length > 500) {
                    document.getElementById('descricaoError').textContent = 'Descrição não pode exceder 500 caracteres';
                    isValid = false;
                }

                // Validação da data
                if (prazo) {
                    const selectedDate = new Date(prazo);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (selectedDate < today) {
                        document.getElementById('prazoError').textContent = 'Data de vencimento não pode ser anterior a hoje';
                        isValid = false;
                    }
                }

                return isValid;
            }

            // Event listener para o formulário de edição
            document.getElementById('editForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                if (!validateForm()) {
                    return;
                }

                if (!confirm('Tem certeza que deseja salvar as alterações?')) {
                    return;
                }                const formData = new FormData(e.target);
                const taskData = {
                    título: formData.get('titulo'),
                    descricao: formData.get('descricao'),
                    prazo: formData.get('prazo') || null,
                    prioridade: formData.get('prioridade'),
                    concluido: formData.get('concluido') === 'true',
                };

                try {
                    const response = await fetch(`/task/${currentEditingTaskId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(taskData)
                    });

                    if (response.ok) {
                        closeEditModal();
                        loadTasks();
                        alert('Tarefa atualizada com sucesso!');
                    } else {
                        const error = await response.json();
                        if (response.status === 401) {
                            alert('Sessão expirada. Faça login novamente.');
                            window.location.href = '/login';
                        } else if (response.status === 403) {
                            alert('Acesso negado: você só pode editar suas próprias atividades.');
                        } else {
                            alert(`Erro ao atualizar tarefa: ${error.error || 'Erro desconhecido'}`);
                        }
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao atualizar tarefa');
                }
            });

            async function deleteTask(taskId, lineElement) {
                if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
                    return;
                }

                try {
                    const response = await fetch(`/task/${taskId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        lineElement.remove();
                        alert('Tarefa excluída com sucesso!');
                    } else {
                        const error = await response.json();
                        if (response.status === 401) {
                            alert('Sessão expirada. Faça login novamente.');
                            window.location.href = '/login';
                        } else if (response.status === 403) {
                            alert('Acesso negado: você só pode excluir suas próprias atividades.');
                        } else if (response.status === 404) {
                            alert('Atividade não encontrada.');
                        } else {
                            alert(`Erro ao excluir tarefa: ${error.error || 'Erro desconhecido'}`);
                        }
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao excluir a tarefa');
                }
            }

            // Fechar modal ao clicar fora dele
            window.addEventListener('click', (event) => {
                const modal = document.getElementById('editModal');
                if (event.target === modal) {
                    closeEditModal();
                }
            });
        </script>

    </div>
</div>

<style>
    .filtros-container {
        display: flex;
        justify-content: center;
        margin-top: 40px;      /* aumenta o espaço acima */
        margin-bottom: 30px;   /* espaço abaixo */
    }
</style>