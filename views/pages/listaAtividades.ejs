<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', sans-serif;
    }

    body {
        background-color: #f9f9f9;
        padding: 40px;
        color: #333;
    }

    .containerSuperior p {
        font-size: 16px;
        color: #666;
        margin-bottom: 20px;
    }

    .atalho p {
        font-size: 16px;
        color: #666;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    th,td {
        text-align: left;
        padding: 12px 16px;
        border-bottom: 1px solid #eee;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    td input {
        border: none;
        background-color: transparent;
        width: 100%;
        font-size: 14px;
    }

    td input:disabled {
        color: #555;
    }

    button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 18px;
    }
</style>

<div class="containerSuperior">
    <h1>Lista de tarefas</h1>
    <p>Organize suas tarefas de forma simples e eficiente</p>
</div>
<div class="atalho">
    <p><a href="/novaAtividade">+ adicionar atividade</a></p>
</div>
<div>
    <table>
        <thead>
            <tr>
                <th scope="col">T√≠tulo</th>
                <th scope="col">Descri√ß√£o</th>
                <th scope="col">Prazo</th>
                <th scope="col">Prioridade</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody id="atividades"></tbody>
    </table>

    <script>

        window.addEventListener('load', async () => { // ao carregar a p√°gina, ocorre o que est√° na fun√ß√£o (essa √© do tipo arrow function)
            const response = await fetch("/task"); // requisi√ß√£o dos dados (que chegam como stream)
            const data = await response.json(); // formata esses dados para json (e agora √© poss√≠vel ve-los no console.log)
            const tableBody = document.querySelector("#atividades") // pegou o objeto tbody

            data.forEach(task => { // para cada task (task=objeto=json) dentro de data
                const line = document.createElement("tr"); // cria-se uma nova linha para expor os dados

                //criar colunas edit√°veis
                createEditableColumn(line, "t√≠tulo", task.t√≠tulo);
                createEditableColumn(line, "descricao", task.descricao);
                createEditableColumn(line, "prazo", formatDateInput(task.prazo));
                createEditableColumn(line, "prioridade", task.prioridade);
                createEditableColumn(line, "concluido", task.concluido);

                // Bot√£o Editar
                const actionTd = document.createElement("td");
                const editButton = document.createElement("button");
                editButton.innerText = "‚úèÔ∏è";
                editButton.addEventListener("click", () => enableEditing(line, task.id, editButton));
                actionTd.appendChild(editButton);
                line.appendChild(actionTd);

                // Bot√£o Excluir
                const deleteButton = document.createElement("button");
                deleteButton.innerText = "üóëÔ∏è";
                deleteButton.style.marginLeft = "5px";
                deleteButton.addEventListener("click", () => deleteTask(task.id, line));
                actionTd.appendChild(deleteButton);

                tableBody.appendChild(line);

            });
        })

        //Definindo as Fun√ß√µes

        function createEditableColumn(line, field, value) {
            const column = document.createElement("td");
            const input = document.createElement("input");
            input.value = value;
            input.disabled = true;
            input.dataset.field = field;
            column.appendChild(input);
            line.appendChild(column);
        }

        function formatDateInput(dateStr) {
            const date = new Date(dateStr);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${day}/${month}/${year}`;
        }

        function enableEditing(row, taskId, button) {
            const inputs = row.querySelectorAll("input");
            const editing = button.innerText === "‚úèÔ∏è";

            inputs.forEach(input => input.disabled = !editing);
            button.innerText = editing ? "üíæ" : "‚úèÔ∏è";

            if (!editing) {
                // Salvar
                const body = {};
                inputs.forEach(input => {
                    const field = input.dataset.field;
                    body[field] = input.value;
                });

                fetch(`/task/${taskId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(body)
                })
                    .then(res => {
                        if (res.ok) {
                            alert("Tarefa atualizada com sucesso!");
                        } else {
                            alert("Erro ao atualizar tarefa.");
                        }
                    });
            }
        }

        function deleteTask(taskId, row) {
            const confirmar = confirm("Tem certeza que deseja excluir esta tarefa?");
            if (!confirmar) return;

            fetch(`/task/${taskId}`, {
                method: "DELETE"
            }).then(res => {
                if (res.ok) {
                    row.remove();
                    alert("Tarefa exclu√≠da com sucesso!");
                } else {
                    alert("Erro ao excluir tarefa.");
                }
            });
        }
    </script>

</div>