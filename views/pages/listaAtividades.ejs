<div class="containerAtividades">

    <div class="containerSuperior">
        <h1>Lista de tarefas</h1>
        <p>Organize suas tarefas de forma simples e eficiente</p>
    </div>

    <div class="atalho">
        <a href="/novaAtividade">
            <button
                style="background-color: #a78bfa; color: white; border: none; padding: 12px 20px; font-size: 16px;border-radius: 8px;cursor: pointer;width: 100%; transition: background-color 0.2s ease;">adicionar
                atividade</button>
        </a>
    </div>

    <br>
    <div>
        <table>
            <thead>
                <tr>
                    <th scope="col">Título</th>
                    <th scope="col">Descrição</th>
                    <th scope="col">Prazo</th>
                    <th scope="col">Prioridade</th>
                    <th scope="col">Status</th>
                    <th scope=""></th>
                </tr>
            </thead>
            <tbody id="atividades"></tbody>
        </table>

        <script> // entende o código abaixo em JS (ao invés de HTML)

            window.addEventListener('load', async () => { // ao carregar a página, ocorre o que está na função (essa é do tipo arrow function)
                const response = await fetch("/task"); // requisição dos dados (que chegam como stream)
                const data = await response.json(); // formata esses dados para json (e agora é possível ve-los no console.log)
                const tableBody = document.querySelector("#atividades") // pegou o objeto tbody
                data.forEach(task => { // para cada task (task=objeto=json) dentro de data

                    const line = document.createElement("tr"); // cria-se uma nova linha para expor os dados
                    createColumn(line, task.título);
                    createColumn(line, task.descricao);
                    createColumn(line, task.prazo);
                    createColumn(line, task.prioridade);
                    createColumn(line, task.concluido);

                    // Criar a nova coluna para o botão
                    const buttonColumn = document.createElement("td");
                    const button = document.createElement("button");
                    button.innerText = "Excluir"; // ou qualquer outro texto
                    button.style.cssText = "background-color: #dc2626; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;";

                    // Adicionar evento de clique ao botão se necessário
                    button.addEventListener('click', async (event) => {
                        try {
                            const response = await fetch(`/task/${task.id}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });

                            if (response.ok) {
                                // Remove a linha da tabela
                                line.remove();
                            } else {
                                alert('Erro ao excluir a tarefa');
                            }
                        } catch (error) {
                            console.error('Erro:', error);
                            alert('Erro ao excluir a tarefa');
                        }
                    });

                    buttonColumn.appendChild(button);
                    line.appendChild(buttonColumn);
                    tableBody.appendChild(line);
                });
            })

            function createColumn(line, text) {
                const column = document.createElement("td"); // cria-se os espaços nas colunas para cada atributo do objeto
                column.innerText = text; // adiciona a informação
                line.appendChild(column); // para determinada coluna da linha do objeto filho
            }

        </script>

    </div>
</div>